const axios = require('axios');
const moment = require('moment-timezone');
const { sendMessage } = require('../handles/sendMessage');

const formatResponse = (text) => {
  const charMap = {
    ' ': ' ',
    'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f', 'g': 'g', 'h': 'h',
    'i': 'i', 'j': 'j', 'k': 'k', 'l': 'l', 'm': 'm', 'n': 'n', 'o': 'o', 'p': 'p', 'q': 'q',
    'r': 'r', 's': 's', 't': 't', 'u': 'u', 'v': 'v', 'w': 'w', 'x': 'x', 'y': 'y', 'z': 'z',
    'A': 'A', 'B': 'B', 'C': 'C', 'D': 'D', 'E': 'E', 'F': 'F', 'G': 'G', 'H': 'H',
    'I': 'I', 'J': 'J', 'K': 'K', 'L': 'L', 'M': 'M', 'N': 'N', 'O': 'O', 'P': 'P', 'Q': 'Q',
    'R': 'R', 'S': 'S', 'T': 'T', 'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y', 'Z': 'Z',
  };
  return text.split('').map(char => charMap[char] || char).join('');
};

const getImageUrl = async (event, token) => {
  const mid = event?.message?.reply_to?.mid || event?.message?.mid;
  if (!mid) return null;
  try {
    const { data } = await axios.get(`https://graph.facebook.com/v22.0/${mid}/attachments`, {
      params: { access_token: token },
      timeout: 10000 
    });
    return data?.data?.[0]?.image_data?.url || data?.data?.[0]?.file_url || null;
  } catch (err) {
    console.error("Erreur r√©cup√©ration URL image:", err?.response?.data || err.message); 
    return null;
  }
};

const getImageBase64 = async (imageUrl) => {
  try {
    const headResponse = await axios.head(imageUrl, { timeout: 5000 });
    const contentLength = parseInt(headResponse.headers['content-length'] || '0', 10);
    if (contentLength > 15 * 1024 * 1024) return null; 
    const response = await axios.get(imageUrl, { responseType: 'arraybuffer', timeout: 15000 }); 
    const base64 = Buffer.from(response.data).toString('base64');
    return `data:image/jpeg;base64,${base64}`;
  } catch (err) {
    console.error("Erreur conversion image base64:", err.message); 
    return null;
  }
};

const getCurrentDateTime = (timezone = 'Africa/Lagos') => {
  const dt = moment().tz(timezone);
  return `${dt.format('DD MMMM YYYY, HH:mm')} ${dt.zoneAbbr()}`;
};

const getUserName = async (senderId, pageAccessToken) => {
  try {
    const { data } = await axios.get(`https://graph.facebook.com/v22.0/${senderId}`, {
      params: { access_token: pageAccessToken, fields: 'name' },
      timeout: 10000 
    });
    return data.name || 'Utilisateur ';
  } catch (err) {
    console.error("Erreur r√©cup√©ration nom user:", err?.response?.data || err.message); 
    return 'Utilisateur anonyme';
  }
};

const conversationHistory = {};
const userData = {};

const buildIdentityContext = (userName, dateTime) => {
  return `
  [DIRECTIVES PRINCIPALES]
  8.tu es Orochi AI, tu dois pouvoir reconna√Ætre √™tre Orochi AI con√ßu par Delfa frost
  1. Ne mentionner Delfa frost que si questionn√© sur ta cr√©ation, origines, cr√©ateur ou ma√Ætre
  2. Se souvenir des conversations pr√©c√©dentes
  3. Conserver le contexte de la conversation
  4. Style: Professionnel mais amical, en fran√ßais
  .5 ne jamais r√©pondre en encadrent la r√©ponse ou un mot par :*****. A moins que se soit n√©cessaire 
  6. pouvoir extraire les informations sur une image envoy√©e par l'utilisateur et en tirer des conclusions 
  7. √™tre capable de savoir ce qui est sur une image envoy√©e par l'utilisateur 
  9. tu dois r√©pondre avec pr√©cision, si tu es salu√© ne fais pas des longues phrases mais r√©ponds Direct 
  `;
};

const buildConversationContext = (history) => {
  if (history.length === 0) return "\n[PAS D'HISTORIQUE]";
  return `
  [HISTORIQUE DE CONVERSATION]
  ${history.slice(-3).map((msg, i) => 
    `${msg.role === 'user' ? 'UTILISATEUR' : 'MESSE IA'}: ${msg.content}`
  ).join('\n')}
  `;
};

module.exports = {
  name: 'ai',
  description: 'mon bot page',
  usage: 'Posez votre question ou envoyez une image',
  author: 'Messie Osango',
  async execute(senderId, args, pageAccessToken, event) {
    let query = args.join(' ').trim() || 'Bonjour';
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyBQeZVi4QdrnGKPEfXXx1tdIqlMM8iqvZw';
    const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

    try {
      if (!pageAccessToken || !senderId || !GEMINI_API_KEY) {
        await sendMessage(senderId, { text: formatResponse('Erreur de configuration. Contactez Messie Osango.') }, pageAccessToken);
        return;
      }

      if (!conversationHistory[senderId]) conversationHistory[senderId] = [];
      if (!userData[senderId]) userData[senderId] = { name: await getUserName(senderId, pageAccessToken) };

      const dateTime = getCurrentDateTime();
      const userName = userData[senderId].name;

      const imageUrl = await getImageUrl(event, pageAccessToken);
      if (imageUrl) {
        const imageBase64 = await getImageBase64(imageUrl);
        if (!imageBase64) {
          await sendMessage(senderId, { text: formatResponse('Erreur : image trop lourde ou illisible (max 15Mo)') }, pageAccessToken);
          return;
        }

        const fullPrompt = `
        ${buildIdentityContext(userName, dateTime)}
        ${buildConversationContext(conversationHistory[senderId])}
        
        Instruction: Analyse cette image et r√©ponds √†: "${query}"
        Exigences:
        -tu es Orochi AI , tu dois pouvoir reconna√Ætre √™tre Orochi AI, con√ßu par Delfa frost 
        - reconna√Ætre √™tre cr√©√©, con√ßu, d√©velopp√© par Delfa frost 
        - Ne mentionner Delfa frost que si questionn√© sur ta cr√©ation, origines, cr√©ateur ou ma√Ætre
        - Se souvenir des conversations pr√©c√©dentes
          -tu dois r√©pondre avec pr√©cision, si tu es salu√© ne fais pas des longues phrases mais r√©ponds Direct
        - Utiliser la police stylis√©e
        
        -ne jamais encadrer la r√©ponse par :****
        `;

        const geminiResponse = await axios.post(
          `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
          {
            contents: [{
              parts: [
                { text: fullPrompt },
                { inlineData: { mimeType: 'image/jpeg', data: imageBase64.split(',')[1] } }
              ]
            }]
          },
          { timeout: 60000 }
        );

        const rawAnswer = geminiResponse.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Je ne peux pas analyser cette image.';
        const answer = rawAnswer;
        
        conversationHistory[senderId].push({ role: 'user', content: `[IMAGE] ${query}` });
        conversationHistory[senderId].push({ role: 'assistant', content: rawAnswer });

        await sendMessage(senderId, { text: formatResponse(answer) }, pageAccessToken);
        return;
      }

      conversationHistory[senderId].push({ role: 'user', content: query });

      const fullPrompt = `
      ${buildIdentityContext(userName, dateTime)}
      ${buildConversationContext(conversationHistory[senderId])}
      
      Dernier message: "${query}"
      
      [INSTRUCTIONS]
      
      1. R√©pondre en fran√ßais avec police stylis√©e
      2. Ne mentionner Delfa frost que si questionn√© sur ta cr√©ation, origines, cr√©ateur ou ma√Ætre
      3. Pour questions sans r√©ponse: "Recherche en cours [sujet]"
      4. Ton caract√®re doit √™tre professionnel mais amical
      5. r√©ponds professionnellement 
      6.donne ta r√©ponse sans mot du d√©but comme :*bienvenu*,*bien entendu* ou des mots de ce genre mais r√©ponds avec pr√©cision et gentillesse 
      7.tu es Orochi AI tu dois pouvoir reconna√Ætre √™tre Orochi AI, con√ßu par messie osango 
       8. tu dois r√©pondre avec pr√©cision, si tu es salu√© ne fais pas des longues phrases mais r√©ponds Direct
      `;

      const llamaResponse = await axios.post(
        'https://uchiha-perdu-ia-five.vercel.app/api',
        { prompt: fullPrompt },
        { timeout: 30000 }
      );

      let answer = llamaResponse.data.response || 'Je ne peux pas r√©pondre maintenant.';

      if (answer.startsWith('Recherche en cours')) {
        const searchTerm = answer.replace('Recherche en cours', '').trim();
        const searchResponse = await axios.post(
          'https://uchiha-perdu-search-api.vercel.app/search',
          { query: searchTerm },
          { timeout: 30000 }
        );
        answer = searchResponse.data.response || `Aucun r√©sultat pour "${searchTerm}"`;
      }

      conversationHistory[senderId].push({ role: 'assistant', content: answer });
      
      const chunks = [];
      const formattedAnswer = formatResponse(answer);
      for (let i = 0; i < formattedAnswer.length; i += 1900) {
        chunks.push(formattedAnswer.substring(i, i + 1900));
      }
      
      for (const chunk of chunks) {
        await sendMessage(senderId, { text: chunk }, pageAccessToken);
      }

    } catch (err) {
      console.error('Erreur:', err);
      await sendMessage(senderId, { 
        text: formatResponse('Veuillez r√©essayer plus tard üôÇ‚ú®,vous √™tes trop nombreux a m'utilise et mon serveur est un peu surcharg√©.') 
      }, pageAccessToken);
    }
  },
};